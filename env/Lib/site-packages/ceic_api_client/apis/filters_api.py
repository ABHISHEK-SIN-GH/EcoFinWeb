# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class FiltersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_filter(self, **kwargs):  # noqa: E501
        """Create a filter  # noqa: E501

        Creates a series filter. A filter may contain both, an exact list of series and search criterion. The resulted set is a union of both. Filters can be used with /series/search, /dumps and /feeds functions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool forecast_only: If it is `true` result will only contain series with forecast
        :param bool with_release_only: If it is `true` result will only contain series with released schedule
        :param bool with_replacements_only: If it is `true` result will only contain series with suggestions
        :param bool with_observations_only: If it is `true` result will not contain series without observations
        :param list[str] series: List of series, comma separated. Its length cannot be more than 100000.
        :param str name: Name of the new record. Max length 100
        :param str description: Description of the new record. Max length 1000
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly H - Semi-annual Y - Annual Z - Quinquennially T - Decadal
        :param list[str] country: **DEPRECATED. Please use `geo` parameter.** Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return entries created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] geo: Geo filter. One or more comma separated geo id values. See related Dictionary function to get the full list of accepted geo ids.
        :param list[str] topic: Topic filter. One or more comma separated topic code values.
        :param list[str] section: Section filter. One or more comma separated section code values.
        :param list[str] table: Table filter. One or more comma separated table code values.
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] order: Sort order. Default is `relevance`.
        :param list[str] database:  Database filter. One or more comma separated database code values. Use `/dictionary/databases` to get an up to date list of available databases. WORLD - *World Trend Plus*  WGEM - *Economic Monitor*  WAEM - *ASEAN Economic Monitor*  WFOR - *Forecast*  WCOM - *Commodity Market*  WCOC - *Country Competitiveness*  WAGR - *Aggregates*  WASS - *International Associations*  WIT10 - *Industry Top Companies*  GLOBAL - *Global Database*  AA - *Asia*  ECA - *Europe and Central Asia*  MEA - *Middle East and Africa*  NSA - *North and South America*  CEICGLBKS - *Global Key Series Database*  PMI - *S&P Global Purchasing Managers' Index*  DAILY - *Daily Database*  BRAZIL - *Brazil Premium Database*  RUSSIA - *Russia Premium Database*  INDIA - *India Premium Database*  INDONESIA - *Indonesia Premium Database*  CN - *China Premium Database*         
        :param list[str] direction: Sort order direction. Default is `asc`. Accepted values: `asc` - ascending `desc` - descending
        :return: FilterResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Create a filter  # noqa: E501

        Creates a series filter. A filter may contain both, an exact list of series and search criterion. The resulted set is a union of both. Filters can be used with /series/search, /dumps and /feeds functions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool forecast_only: If it is `true` result will only contain series with forecast
        :param bool with_release_only: If it is `true` result will only contain series with released schedule
        :param bool with_replacements_only: If it is `true` result will only contain series with suggestions
        :param bool with_observations_only: If it is `true` result will not contain series without observations
        :param list[str] series: List of series, comma separated. Its length cannot be more than 100000.
        :param str name: Name of the new record. Max length 100
        :param str description: Description of the new record. Max length 1000
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly H - Semi-annual Y - Annual Z - Quinquennially T - Decadal
        :param list[str] country: **DEPRECATED. Please use `geo` parameter.** Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return entries created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] geo: Geo filter. One or more comma separated geo id values. See related Dictionary function to get the full list of accepted geo ids.
        :param list[str] topic: Topic filter. One or more comma separated topic code values.
        :param list[str] section: Section filter. One or more comma separated section code values.
        :param list[str] table: Table filter. One or more comma separated table code values.
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] order: Sort order. Default is `relevance`.
        :param list[str] database:  Database filter. One or more comma separated database code values. Use `/dictionary/databases` to get an up to date list of available databases. WORLD - *World Trend Plus*  WGEM - *Economic Monitor*  WAEM - *ASEAN Economic Monitor*  WFOR - *Forecast*  WCOM - *Commodity Market*  WCOC - *Country Competitiveness*  WAGR - *Aggregates*  WASS - *International Associations*  WIT10 - *Industry Top Companies*  GLOBAL - *Global Database*  AA - *Asia*  ECA - *Europe and Central Asia*  MEA - *Middle East and Africa*  NSA - *North and South America*  CEICGLBKS - *Global Key Series Database*  PMI - *S&P Global Purchasing Managers' Index*  DAILY - *Daily Database*  BRAZIL - *Brazil Premium Database*  RUSSIA - *Russia Premium Database*  INDIA - *India Premium Database*  INDONESIA - *Indonesia Premium Database*  CN - *China Premium Database*         
        :param list[str] direction: Sort order direction. Default is `asc`. Accepted values: `asc` - ascending `desc` - descending
        :return: FilterResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'format', 'token', 'with_model_information', 'forecast_only', 'with_release_only', 'with_replacements_only', 'with_observations_only', 'series', 'name', 'description', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'geo', 'topic', 'section', 'table', 'status', 'order', 'database', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'forecast_only' in params:
            query_params.append(('forecast_only', params['forecast_only']))  # noqa: E501
        if 'with_release_only' in params:
            query_params.append(('with_release_only', params['with_release_only']))  # noqa: E501
        if 'with_replacements_only' in params:
            query_params.append(('with_replacements_only', params['with_replacements_only']))  # noqa: E501
        if 'with_observations_only' in params:
            query_params.append(('with_observations_only', params['with_observations_only']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'series' in params:
            form_params.append(('series', params['series']))  # noqa: E501
            collection_formats['series'] = 'csv'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'keyword' in params:
            form_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            form_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            form_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            form_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            form_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            form_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            form_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            form_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            form_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            form_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            form_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            form_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            form_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            form_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'geo' in params:
            form_params.append(('geo', params['geo']))  # noqa: E501
            collection_formats['geo'] = 'csv'  # noqa: E501
        if 'topic' in params:
            form_params.append(('topic', params['topic']))  # noqa: E501
            collection_formats['topic'] = 'csv'  # noqa: E501
        if 'section' in params:
            form_params.append(('section', params['section']))  # noqa: E501
            collection_formats['section'] = 'csv'  # noqa: E501
        if 'table' in params:
            form_params.append(('table', params['table']))  # noqa: E501
            collection_formats['table'] = 'csv'  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'order' in params:
            form_params.append(('order', params['order']))  # noqa: E501
            collection_formats['order'] = 'csv'  # noqa: E501
        if 'database' in params:
            form_params.append(('database', params['database']))  # noqa: E501
            collection_formats['database'] = 'csv'  # noqa: E501
        if 'direction' in params:
            form_params.append(('direction', params['direction']))  # noqa: E501
            collection_formats['direction'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['CEIC_API_Authorizer', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/filters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_filters(self, id, **kwargs):  # noqa: E501
        """Delete filters  # noqa: E501

        Delete list of filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filters(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Filter ID. Accepts one or more comma separated values. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: EmptyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_filters_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_filters_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_filters_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete filters  # noqa: E501

        Delete list of filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filters_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Filter ID. Accepts one or more comma separated values. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: EmptyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['CEIC_API_Authorizer', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/filters/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_filters(self, id, **kwargs):  # noqa: E501
        """Get filter details  # noqa: E501

        Get information about one or more filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filters(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Filter ID. Accepts one or more comma separated values. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FiltersResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_filters_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_filters_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_filters_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get filter details  # noqa: E501

        Get information about one or more filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filters_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Filter ID. Accepts one or more comma separated values. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FiltersResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['CEIC_API_Authorizer', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/filters/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FiltersResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_filters(self, **kwargs):  # noqa: E501
        """Get user filters  # noqa: E501

        Returns list of user created filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_filters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FiltersResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_filters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_filters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_filters_with_http_info(self, **kwargs):  # noqa: E501
        """Get user filters  # noqa: E501

        Returns list of user created filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_filters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FiltersResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_filters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['CEIC_API_Authorizer', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/filters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FiltersResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_filter(self, id, **kwargs):  # noqa: E501
        """Update filter details  # noqa: E501

        Update search, series and metadata information for a specific filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A single Filter ID value (required)
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool forecast_only: If it is `true` result will only contain series with forecast
        :param bool with_release_only: If it is `true` result will only contain series with released schedule
        :param bool with_replacements_only: If it is `true` result will only contain series with suggestions
        :param bool with_observations_only: If it is `true` result will not contain series without observations
        :param list[str] series: List of series, comma separated. Its length cannot be more than 100000.
        :param str name: Name of the new record. Max length 100
        :param str description: Description of the new record. Max length 1000
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly H - Semi-annual Y - Annual Z - Quinquennially T - Decadal
        :param list[str] country: **DEPRECATED. Please use `geo` parameter.** Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return entries created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] geo: Geo filter. One or more comma separated geo id values. See related Dictionary function to get the full list of accepted geo ids.
        :param list[str] topic: Topic filter. One or more comma separated topic code values.
        :param list[str] section: Section filter. One or more comma separated section code values.
        :param list[str] table: Table filter. One or more comma separated table code values.
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] order: Sort order. Default is `relevance`.
        :param list[str] database:  Database filter. One or more comma separated database code values. Use `/dictionary/databases` to get an up to date list of available databases. WORLD - *World Trend Plus*  WGEM - *Economic Monitor*  WAEM - *ASEAN Economic Monitor*  WFOR - *Forecast*  WCOM - *Commodity Market*  WCOC - *Country Competitiveness*  WAGR - *Aggregates*  WASS - *International Associations*  WIT10 - *Industry Top Companies*  GLOBAL - *Global Database*  AA - *Asia*  ECA - *Europe and Central Asia*  MEA - *Middle East and Africa*  NSA - *North and South America*  CEICGLBKS - *Global Key Series Database*  PMI - *S&P Global Purchasing Managers' Index*  DAILY - *Daily Database*  BRAZIL - *Brazil Premium Database*  RUSSIA - *Russia Premium Database*  INDIA - *India Premium Database*  INDONESIA - *Indonesia Premium Database*  CN - *China Premium Database*         
        :param list[str] direction: Sort order direction. Default is `asc`. Accepted values: `asc` - ascending `desc` - descending
        :return: FilterResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_filter_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_filter_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_filter_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update filter details  # noqa: E501

        Update search, series and metadata information for a specific filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A single Filter ID value (required)
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool forecast_only: If it is `true` result will only contain series with forecast
        :param bool with_release_only: If it is `true` result will only contain series with released schedule
        :param bool with_replacements_only: If it is `true` result will only contain series with suggestions
        :param bool with_observations_only: If it is `true` result will not contain series without observations
        :param list[str] series: List of series, comma separated. Its length cannot be more than 100000.
        :param str name: Name of the new record. Max length 100
        :param str description: Description of the new record. Max length 1000
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly H - Semi-annual Y - Annual Z - Quinquennially T - Decadal
        :param list[str] country: **DEPRECATED. Please use `geo` parameter.** Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return entries created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] geo: Geo filter. One or more comma separated geo id values. See related Dictionary function to get the full list of accepted geo ids.
        :param list[str] topic: Topic filter. One or more comma separated topic code values.
        :param list[str] section: Section filter. One or more comma separated section code values.
        :param list[str] table: Table filter. One or more comma separated table code values.
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] order: Sort order. Default is `relevance`.
        :param list[str] database:  Database filter. One or more comma separated database code values. Use `/dictionary/databases` to get an up to date list of available databases. WORLD - *World Trend Plus*  WGEM - *Economic Monitor*  WAEM - *ASEAN Economic Monitor*  WFOR - *Forecast*  WCOM - *Commodity Market*  WCOC - *Country Competitiveness*  WAGR - *Aggregates*  WASS - *International Associations*  WIT10 - *Industry Top Companies*  GLOBAL - *Global Database*  AA - *Asia*  ECA - *Europe and Central Asia*  MEA - *Middle East and Africa*  NSA - *North and South America*  CEICGLBKS - *Global Key Series Database*  PMI - *S&P Global Purchasing Managers' Index*  DAILY - *Daily Database*  BRAZIL - *Brazil Premium Database*  RUSSIA - *Russia Premium Database*  INDIA - *India Premium Database*  INDONESIA - *Indonesia Premium Database*  CN - *China Premium Database*         
        :param list[str] direction: Sort order direction. Default is `asc`. Accepted values: `asc` - ascending `desc` - descending
        :return: FilterResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept', 'format', 'token', 'with_model_information', 'forecast_only', 'with_release_only', 'with_replacements_only', 'with_observations_only', 'series', 'name', 'description', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'geo', 'topic', 'section', 'table', 'status', 'order', 'database', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'forecast_only' in params:
            query_params.append(('forecast_only', params['forecast_only']))  # noqa: E501
        if 'with_release_only' in params:
            query_params.append(('with_release_only', params['with_release_only']))  # noqa: E501
        if 'with_replacements_only' in params:
            query_params.append(('with_replacements_only', params['with_replacements_only']))  # noqa: E501
        if 'with_observations_only' in params:
            query_params.append(('with_observations_only', params['with_observations_only']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'series' in params:
            form_params.append(('series', params['series']))  # noqa: E501
            collection_formats['series'] = 'csv'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'keyword' in params:
            form_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            form_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            form_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            form_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            form_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            form_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            form_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            form_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            form_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            form_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            form_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            form_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            form_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            form_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'geo' in params:
            form_params.append(('geo', params['geo']))  # noqa: E501
            collection_formats['geo'] = 'csv'  # noqa: E501
        if 'topic' in params:
            form_params.append(('topic', params['topic']))  # noqa: E501
            collection_formats['topic'] = 'csv'  # noqa: E501
        if 'section' in params:
            form_params.append(('section', params['section']))  # noqa: E501
            collection_formats['section'] = 'csv'  # noqa: E501
        if 'table' in params:
            form_params.append(('table', params['table']))  # noqa: E501
            collection_formats['table'] = 'csv'  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'order' in params:
            form_params.append(('order', params['order']))  # noqa: E501
            collection_formats['order'] = 'csv'  # noqa: E501
        if 'database' in params:
            form_params.append(('database', params['database']))  # noqa: E501
            collection_formats['database'] = 'csv'  # noqa: E501
        if 'direction' in params:
            form_params.append(('direction', params['direction']))  # noqa: E501
            collection_formats['direction'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['CEIC_API_Authorizer', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/filters/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
