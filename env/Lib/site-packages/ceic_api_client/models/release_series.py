# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReleaseSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'series_id': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'name': 'str',
        'source_name': 'str',
        'last_updated': 'date',
        'frequency': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'series_id': 'seriesId',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'name': 'name',
        'source_name': 'sourceName',
        'last_updated': 'lastUpdated',
        'frequency': 'frequency',
        'unit': 'unit'
    }

    def __init__(self, series_id=None, start_date=None, end_date=None, name=None, source_name=None, last_updated=None, frequency=None, unit=None):  # noqa: E501
        """ReleaseSeries - a model defined in Swagger"""  # noqa: E501

        self._series_id = None
        self._start_date = None
        self._end_date = None
        self._name = None
        self._source_name = None
        self._last_updated = None
        self._frequency = None
        self._unit = None
        self.discriminator = None

        if series_id is not None:
            self.series_id = series_id
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if name is not None:
            self.name = name
        if source_name is not None:
            self.source_name = source_name
        if last_updated is not None:
            self.last_updated = last_updated
        if frequency is not None:
            self.frequency = frequency
        if unit is not None:
            self.unit = unit

    @property
    def series_id(self):
        """Gets the series_id of this ReleaseSeries.  # noqa: E501

        The series id  # noqa: E501

        :return: The series_id of this ReleaseSeries.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this ReleaseSeries.

        The series id  # noqa: E501

        :param series_id: The series_id of this ReleaseSeries.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def start_date(self):
        """Gets the start_date of this ReleaseSeries.  # noqa: E501

        The series start date  # noqa: E501

        :return: The start_date of this ReleaseSeries.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReleaseSeries.

        The series start date  # noqa: E501

        :param start_date: The start_date of this ReleaseSeries.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ReleaseSeries.  # noqa: E501

        The series end date  # noqa: E501

        :return: The end_date of this ReleaseSeries.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReleaseSeries.

        The series end date  # noqa: E501

        :param end_date: The end_date of this ReleaseSeries.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def name(self):
        """Gets the name of this ReleaseSeries.  # noqa: E501

        The series name  # noqa: E501

        :return: The name of this ReleaseSeries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseSeries.

        The series name  # noqa: E501

        :param name: The name of this ReleaseSeries.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_name(self):
        """Gets the source_name of this ReleaseSeries.  # noqa: E501

        The series source name  # noqa: E501

        :return: The source_name of this ReleaseSeries.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this ReleaseSeries.

        The series source name  # noqa: E501

        :param source_name: The source_name of this ReleaseSeries.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def last_updated(self):
        """Gets the last_updated of this ReleaseSeries.  # noqa: E501

        The series last updated date  # noqa: E501

        :return: The last_updated of this ReleaseSeries.  # noqa: E501
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ReleaseSeries.

        The series last updated date  # noqa: E501

        :param last_updated: The last_updated of this ReleaseSeries.  # noqa: E501
        :type: date
        """

        self._last_updated = last_updated

    @property
    def frequency(self):
        """Gets the frequency of this ReleaseSeries.  # noqa: E501

        The series frequency  # noqa: E501

        :return: The frequency of this ReleaseSeries.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ReleaseSeries.

        The series frequency  # noqa: E501

        :param frequency: The frequency of this ReleaseSeries.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def unit(self):
        """Gets the unit of this ReleaseSeries.  # noqa: E501

        The series unit  # noqa: E501

        :return: The unit of this ReleaseSeries.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ReleaseSeries.

        The series unit  # noqa: E501

        :param unit: The unit of this ReleaseSeries.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
