# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SeriesReleaseScheduleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'release_status': 'str',
        'code': 'str',
        '_from': 'date',
        'release_type': 'str',
        'timepoint_date': 'date',
        'release_date': 'date',
        'to': 'date'
    }

    attribute_map = {
        'release_status': 'releaseStatus',
        'code': 'code',
        '_from': 'from',
        'release_type': 'releaseType',
        'timepoint_date': 'timepointDate',
        'release_date': 'releaseDate',
        'to': 'to'
    }

    def __init__(self, release_status=None, code=None, _from=None, release_type=None, timepoint_date=None, release_date=None, to=None):  # noqa: E501
        """SeriesReleaseScheduleItem - a model defined in Swagger"""  # noqa: E501

        self._release_status = None
        self._code = None
        self.__from = None
        self._release_type = None
        self._timepoint_date = None
        self._release_date = None
        self._to = None
        self.discriminator = None

        if release_status is not None:
            self.release_status = release_status
        if code is not None:
            self.code = code
        if _from is not None:
            self._from = _from
        if release_type is not None:
            self.release_type = release_type
        if timepoint_date is not None:
            self.timepoint_date = timepoint_date
        if release_date is not None:
            self.release_date = release_date
        if to is not None:
            self.to = to

    @property
    def release_status(self):
        """Gets the release_status of this SeriesReleaseScheduleItem.  # noqa: E501

        The status of the release.  Pending, Delayed or Released  # noqa: E501

        :return: The release_status of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this SeriesReleaseScheduleItem.

        The status of the release.  Pending, Delayed or Released  # noqa: E501

        :param release_status: The release_status of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: str
        """

        self._release_status = release_status

    @property
    def code(self):
        """Gets the code of this SeriesReleaseScheduleItem.  # noqa: E501

        Release identifier code.  # noqa: E501

        :return: The code of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SeriesReleaseScheduleItem.

        Release identifier code.  # noqa: E501

        :param code: The code of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def _from(self):
        """Gets the _from of this SeriesReleaseScheduleItem.  # noqa: E501

        Expected start date of the release.  # noqa: E501

        :return: The _from of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SeriesReleaseScheduleItem.

        Expected start date of the release.  # noqa: E501

        :param _from: The _from of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: date
        """

        self.__from = _from

    @property
    def release_type(self):
        """Gets the release_type of this SeriesReleaseScheduleItem.  # noqa: E501

        The type of the release observation data.  Final, Preliminary or Revision  # noqa: E501

        :return: The release_type of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this SeriesReleaseScheduleItem.

        The type of the release observation data.  Final, Preliminary or Revision  # noqa: E501

        :param release_type: The release_type of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: str
        """

        self._release_type = release_type

    @property
    def timepoint_date(self):
        """Gets the timepoint_date of this SeriesReleaseScheduleItem.  # noqa: E501

        The expected time-point observation date of the series.  # noqa: E501

        :return: The timepoint_date of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self._timepoint_date

    @timepoint_date.setter
    def timepoint_date(self, timepoint_date):
        """Sets the timepoint_date of this SeriesReleaseScheduleItem.

        The expected time-point observation date of the series.  # noqa: E501

        :param timepoint_date: The timepoint_date of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: date
        """

        self._timepoint_date = timepoint_date

    @property
    def release_date(self):
        """Gets the release_date of this SeriesReleaseScheduleItem.  # noqa: E501

        The date of the time-point observation release.  # noqa: E501

        :return: The release_date of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this SeriesReleaseScheduleItem.

        The date of the time-point observation release.  # noqa: E501

        :param release_date: The release_date of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: date
        """

        self._release_date = release_date

    @property
    def to(self):
        """Gets the to of this SeriesReleaseScheduleItem.  # noqa: E501

        Expected end date of the release.  # noqa: E501

        :return: The to of this SeriesReleaseScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SeriesReleaseScheduleItem.

        Expected end date of the release.  # noqa: E501

        :param to: The to of this SeriesReleaseScheduleItem.  # noqa: E501
        :type: date
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeriesReleaseScheduleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
