# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeedInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_ftp_username': 'str',
        'consolidation_method': 'str',
        'delivery_path': 'str',
        'frequency': 'int',
        'notification_email': 'str',
        'id': 'str',
        'user_id': 'str',
        'notification_url': 'str',
        'user_ftp_url': 'str',
        'filter_id': 'str',
        'status': 'str',
        'description': 'str',
        'filter_description': 'str',
        'full_dump': 'bool',
        'notification_http_method': 'str',
        'filter_name': 'str',
        'name': 'str',
        'language': 'str',
        'delivery_format': 'str',
        'created_at': 'str',
        'delivery_method': 'str',
        'updated_after': 'str',
        'metadata_only': 'bool'
    }

    attribute_map = {
        'user_ftp_username': 'user_ftp_username',
        'consolidation_method': 'consolidation_method',
        'delivery_path': 'delivery_path',
        'frequency': 'frequency',
        'notification_email': 'notification_email',
        'id': 'id',
        'user_id': 'user_id',
        'notification_url': 'notification_url',
        'user_ftp_url': 'user_ftp_url',
        'filter_id': 'filter_id',
        'status': 'status',
        'description': 'description',
        'filter_description': 'filter_description',
        'full_dump': 'full_dump',
        'notification_http_method': 'notification_http_method',
        'filter_name': 'filter_name',
        'name': 'name',
        'language': 'language',
        'delivery_format': 'delivery_format',
        'created_at': 'created_at',
        'delivery_method': 'delivery_method',
        'updated_after': 'updated_after',
        'metadata_only': 'metadata_only'
    }

    def __init__(self, user_ftp_username=None, consolidation_method=None, delivery_path=None, frequency=None, notification_email=None, id=None, user_id=None, notification_url=None, user_ftp_url=None, filter_id=None, status=None, description=None, filter_description=None, full_dump=None, notification_http_method=None, filter_name=None, name=None, language=None, delivery_format=None, created_at=None, delivery_method=None, updated_after=None, metadata_only=None):  # noqa: E501
        """FeedInformation - a model defined in Swagger"""  # noqa: E501

        self._user_ftp_username = None
        self._consolidation_method = None
        self._delivery_path = None
        self._frequency = None
        self._notification_email = None
        self._id = None
        self._user_id = None
        self._notification_url = None
        self._user_ftp_url = None
        self._filter_id = None
        self._status = None
        self._description = None
        self._filter_description = None
        self._full_dump = None
        self._notification_http_method = None
        self._filter_name = None
        self._name = None
        self._language = None
        self._delivery_format = None
        self._created_at = None
        self._delivery_method = None
        self._updated_after = None
        self._metadata_only = None
        self.discriminator = None

        if user_ftp_username is not None:
            self.user_ftp_username = user_ftp_username
        if consolidation_method is not None:
            self.consolidation_method = consolidation_method
        if delivery_path is not None:
            self.delivery_path = delivery_path
        if frequency is not None:
            self.frequency = frequency
        if notification_email is not None:
            self.notification_email = notification_email
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if notification_url is not None:
            self.notification_url = notification_url
        if user_ftp_url is not None:
            self.user_ftp_url = user_ftp_url
        if filter_id is not None:
            self.filter_id = filter_id
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description
        if filter_description is not None:
            self.filter_description = filter_description
        if full_dump is not None:
            self.full_dump = full_dump
        if notification_http_method is not None:
            self.notification_http_method = notification_http_method
        if filter_name is not None:
            self.filter_name = filter_name
        if name is not None:
            self.name = name
        if language is not None:
            self.language = language
        if delivery_format is not None:
            self.delivery_format = delivery_format
        if created_at is not None:
            self.created_at = created_at
        if delivery_method is not None:
            self.delivery_method = delivery_method
        if updated_after is not None:
            self.updated_after = updated_after
        if metadata_only is not None:
            self.metadata_only = metadata_only

    @property
    def user_ftp_username(self):
        """Gets the user_ftp_username of this FeedInformation.  # noqa: E501

        Username for the FTP server  # noqa: E501

        :return: The user_ftp_username of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_ftp_username

    @user_ftp_username.setter
    def user_ftp_username(self, user_ftp_username):
        """Sets the user_ftp_username of this FeedInformation.

        Username for the FTP server  # noqa: E501

        :param user_ftp_username: The user_ftp_username of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._user_ftp_username = user_ftp_username

    @property
    def consolidation_method(self):
        """Gets the consolidation_method of this FeedInformation.  # noqa: E501

        Feed consolidation method  # noqa: E501

        :return: The consolidation_method of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._consolidation_method

    @consolidation_method.setter
    def consolidation_method(self, consolidation_method):
        """Sets the consolidation_method of this FeedInformation.

        Feed consolidation method  # noqa: E501

        :param consolidation_method: The consolidation_method of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._consolidation_method = consolidation_method

    @property
    def delivery_path(self):
        """Gets the delivery_path of this FeedInformation.  # noqa: E501

        Feed delivery path  # noqa: E501

        :return: The delivery_path of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._delivery_path

    @delivery_path.setter
    def delivery_path(self, delivery_path):
        """Sets the delivery_path of this FeedInformation.

        Feed delivery path  # noqa: E501

        :param delivery_path: The delivery_path of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._delivery_path = delivery_path

    @property
    def frequency(self):
        """Gets the frequency of this FeedInformation.  # noqa: E501

        Data Feed frequency  # noqa: E501

        :return: The frequency of this FeedInformation.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this FeedInformation.

        Data Feed frequency  # noqa: E501

        :param frequency: The frequency of this FeedInformation.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def notification_email(self):
        """Gets the notification_email of this FeedInformation.  # noqa: E501

        The email address to which the notifications will be sent  # noqa: E501

        :return: The notification_email of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this FeedInformation.

        The email address to which the notifications will be sent  # noqa: E501

        :param notification_email: The notification_email of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def id(self):
        """Gets the id of this FeedInformation.  # noqa: E501

        Feed ID  # noqa: E501

        :return: The id of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeedInformation.

        Feed ID  # noqa: E501

        :param id: The id of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this FeedInformation.  # noqa: E501

        The ID of feed creator  # noqa: E501

        :return: The user_id of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FeedInformation.

        The ID of feed creator  # noqa: E501

        :param user_id: The user_id of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def notification_url(self):
        """Gets the notification_url of this FeedInformation.  # noqa: E501

        URL for push notifications  # noqa: E501

        :return: The notification_url of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this FeedInformation.

        URL for push notifications  # noqa: E501

        :param notification_url: The notification_url of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._notification_url = notification_url

    @property
    def user_ftp_url(self):
        """Gets the user_ftp_url of this FeedInformation.  # noqa: E501

        Result delivery path for FTP server  # noqa: E501

        :return: The user_ftp_url of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_ftp_url

    @user_ftp_url.setter
    def user_ftp_url(self, user_ftp_url):
        """Sets the user_ftp_url of this FeedInformation.

        Result delivery path for FTP server  # noqa: E501

        :param user_ftp_url: The user_ftp_url of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._user_ftp_url = user_ftp_url

    @property
    def filter_id(self):
        """Gets the filter_id of this FeedInformation.  # noqa: E501

        The ID of the filter used in the feed  # noqa: E501

        :return: The filter_id of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this FeedInformation.

        The ID of the filter used in the feed  # noqa: E501

        :param filter_id: The filter_id of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._filter_id = filter_id

    @property
    def status(self):
        """Gets the status of this FeedInformation.  # noqa: E501

        Data Feed status  # noqa: E501

        :return: The status of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedInformation.

        Data Feed status  # noqa: E501

        :param status: The status of this FeedInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501

        status = self._parse_enum_value(status, allowed_values)
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self):
        """Gets the description of this FeedInformation.  # noqa: E501

        Feed description  # noqa: E501

        :return: The description of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeedInformation.

        Feed description  # noqa: E501

        :param description: The description of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filter_description(self):
        """Gets the filter_description of this FeedInformation.  # noqa: E501

        Description of the filter used in the feed  # noqa: E501

        :return: The filter_description of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._filter_description

    @filter_description.setter
    def filter_description(self, filter_description):
        """Sets the filter_description of this FeedInformation.

        Description of the filter used in the feed  # noqa: E501

        :param filter_description: The filter_description of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._filter_description = filter_description

    @property
    def full_dump(self):
        """Gets the full_dump of this FeedInformation.  # noqa: E501

        Shows if the feed will always generate full list of time points  # noqa: E501

        :return: The full_dump of this FeedInformation.  # noqa: E501
        :rtype: bool
        """
        return self._full_dump

    @full_dump.setter
    def full_dump(self, full_dump):
        """Sets the full_dump of this FeedInformation.

        Shows if the feed will always generate full list of time points  # noqa: E501

        :param full_dump: The full_dump of this FeedInformation.  # noqa: E501
        :type: bool
        """

        self._full_dump = full_dump

    @property
    def notification_http_method(self):
        """Gets the notification_http_method of this FeedInformation.  # noqa: E501

        HTTP Method for push notifications  # noqa: E501

        :return: The notification_http_method of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._notification_http_method

    @notification_http_method.setter
    def notification_http_method(self, notification_http_method):
        """Sets the notification_http_method of this FeedInformation.

        HTTP Method for push notifications  # noqa: E501

        :param notification_http_method: The notification_http_method of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._notification_http_method = notification_http_method

    @property
    def filter_name(self):
        """Gets the filter_name of this FeedInformation.  # noqa: E501

        The name of the filter used in the feed  # noqa: E501

        :return: The filter_name of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name):
        """Sets the filter_name of this FeedInformation.

        The name of the filter used in the feed  # noqa: E501

        :param filter_name: The filter_name of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._filter_name = filter_name

    @property
    def name(self):
        """Gets the name of this FeedInformation.  # noqa: E501

        Feed name  # noqa: E501

        :return: The name of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeedInformation.

        Feed name  # noqa: E501

        :param name: The name of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def language(self):
        """Gets the language of this FeedInformation.  # noqa: E501

        Feed language code  # noqa: E501

        :return: The language of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this FeedInformation.

        Feed language code  # noqa: E501

        :param language: The language of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def delivery_format(self):
        """Gets the delivery_format of this FeedInformation.  # noqa: E501

        Feed delivery format  # noqa: E501

        :return: The delivery_format of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._delivery_format

    @delivery_format.setter
    def delivery_format(self, delivery_format):
        """Sets the delivery_format of this FeedInformation.

        Feed delivery format  # noqa: E501

        :param delivery_format: The delivery_format of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._delivery_format = delivery_format

    @property
    def created_at(self):
        """Gets the created_at of this FeedInformation.  # noqa: E501

        The date of the creation of the feed  # noqa: E501

        :return: The created_at of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FeedInformation.

        The date of the creation of the feed  # noqa: E501

        :param created_at: The created_at of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def delivery_method(self):
        """Gets the delivery_method of this FeedInformation.  # noqa: E501

        Feed delivery method  # noqa: E501

        :return: The delivery_method of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this FeedInformation.

        Feed delivery method  # noqa: E501

        :param delivery_method: The delivery_method of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._delivery_method = delivery_method

    @property
    def updated_after(self):
        """Gets the updated_after of this FeedInformation.  # noqa: E501

        Datetime value for the next feed file  # noqa: E501

        :return: The updated_after of this FeedInformation.  # noqa: E501
        :rtype: str
        """
        return self._updated_after

    @updated_after.setter
    def updated_after(self, updated_after):
        """Sets the updated_after of this FeedInformation.

        Datetime value for the next feed file  # noqa: E501

        :param updated_after: The updated_after of this FeedInformation.  # noqa: E501
        :type: str
        """

        self._updated_after = updated_after

    @property
    def metadata_only(self):
        """Gets the metadata_only of this FeedInformation.  # noqa: E501

        Shows if the generated data contains metadata only  # noqa: E501

        :return: The metadata_only of this FeedInformation.  # noqa: E501
        :rtype: bool
        """
        return self._metadata_only

    @metadata_only.setter
    def metadata_only(self, metadata_only):
        """Sets the metadata_only of this FeedInformation.

        Shows if the generated data contains metadata only  # noqa: E501

        :param metadata_only: The metadata_only of this FeedInformation.  # noqa: E501
        :type: bool
        """

        self._metadata_only = metadata_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
