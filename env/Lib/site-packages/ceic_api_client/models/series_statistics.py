# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SeriesStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'date',
        'skewness': 'float',
        'end_date': 'date',
        'standard_deviation': 'float',
        'coefficient_variation': 'float',
        'num_points': 'float',
        'variance': 'float',
        'kurtosis': 'float',
        'mean': 'float'
    }

    attribute_map = {
        'start_date': 'startDate',
        'skewness': 'skewness',
        'end_date': 'endDate',
        'standard_deviation': 'standardDeviation',
        'coefficient_variation': 'coefficientVariation',
        'num_points': 'numPoints',
        'variance': 'variance',
        'kurtosis': 'kurtosis',
        'mean': 'mean'
    }

    def __init__(self, start_date=None, skewness=None, end_date=None, standard_deviation=None, coefficient_variation=None, num_points=None, variance=None, kurtosis=None, mean=None):  # noqa: E501
        """SeriesStatistics - a model defined in Swagger"""  # noqa: E501

        self._start_date = None
        self._skewness = None
        self._end_date = None
        self._standard_deviation = None
        self._coefficient_variation = None
        self._num_points = None
        self._variance = None
        self._kurtosis = None
        self._mean = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if skewness is not None:
            self.skewness = skewness
        if end_date is not None:
            self.end_date = end_date
        if standard_deviation is not None:
            self.standard_deviation = standard_deviation
        if coefficient_variation is not None:
            self.coefficient_variation = coefficient_variation
        if num_points is not None:
            self.num_points = num_points
        if variance is not None:
            self.variance = variance
        if kurtosis is not None:
            self.kurtosis = kurtosis
        if mean is not None:
            self.mean = mean

    @property
    def start_date(self):
        """Gets the start_date of this SeriesStatistics.  # noqa: E501


        :return: The start_date of this SeriesStatistics.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SeriesStatistics.


        :param start_date: The start_date of this SeriesStatistics.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def skewness(self):
        """Gets the skewness of this SeriesStatistics.  # noqa: E501


        :return: The skewness of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._skewness

    @skewness.setter
    def skewness(self, skewness):
        """Sets the skewness of this SeriesStatistics.


        :param skewness: The skewness of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._skewness = skewness

    @property
    def end_date(self):
        """Gets the end_date of this SeriesStatistics.  # noqa: E501


        :return: The end_date of this SeriesStatistics.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SeriesStatistics.


        :param end_date: The end_date of this SeriesStatistics.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this SeriesStatistics.  # noqa: E501


        :return: The standard_deviation of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this SeriesStatistics.


        :param standard_deviation: The standard_deviation of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._standard_deviation = standard_deviation

    @property
    def coefficient_variation(self):
        """Gets the coefficient_variation of this SeriesStatistics.  # noqa: E501


        :return: The coefficient_variation of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._coefficient_variation

    @coefficient_variation.setter
    def coefficient_variation(self, coefficient_variation):
        """Sets the coefficient_variation of this SeriesStatistics.


        :param coefficient_variation: The coefficient_variation of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._coefficient_variation = coefficient_variation

    @property
    def num_points(self):
        """Gets the num_points of this SeriesStatistics.  # noqa: E501


        :return: The num_points of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._num_points

    @num_points.setter
    def num_points(self, num_points):
        """Sets the num_points of this SeriesStatistics.


        :param num_points: The num_points of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._num_points = num_points

    @property
    def variance(self):
        """Gets the variance of this SeriesStatistics.  # noqa: E501


        :return: The variance of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this SeriesStatistics.


        :param variance: The variance of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._variance = variance

    @property
    def kurtosis(self):
        """Gets the kurtosis of this SeriesStatistics.  # noqa: E501


        :return: The kurtosis of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._kurtosis

    @kurtosis.setter
    def kurtosis(self, kurtosis):
        """Sets the kurtosis of this SeriesStatistics.


        :param kurtosis: The kurtosis of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._kurtosis = kurtosis

    @property
    def mean(self):
        """Gets the mean of this SeriesStatistics.  # noqa: E501


        :return: The mean of this SeriesStatistics.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this SeriesStatistics.


        :param mean: The mean of this SeriesStatistics.  # noqa: E501
        :type: float
        """

        self._mean = mean

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeriesStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
