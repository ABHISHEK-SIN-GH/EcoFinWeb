# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WatchlistItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'series_id': 'int',
        'popup_notifications': 'bool',
        'name': 'str',
        'last_update_time': 'datetime',
        'is_subscribed': 'bool',
        'name_local': 'str',
        'country_name': 'str',
        'email_notifications': 'str',
        'country_name_local': 'str'
    }

    attribute_map = {
        'series_id': 'seriesId',
        'popup_notifications': 'popupNotifications',
        'name': 'name',
        'last_update_time': 'lastUpdateTime',
        'is_subscribed': 'isSubscribed',
        'name_local': 'nameLocal',
        'country_name': 'countryName',
        'email_notifications': 'emailNotifications',
        'country_name_local': 'countryNameLocal'
    }

    def __init__(self, series_id=None, popup_notifications=None, name=None, last_update_time=None, is_subscribed=None, name_local=None, country_name=None, email_notifications=None, country_name_local=None):  # noqa: E501
        """WatchlistItem - a model defined in Swagger"""  # noqa: E501

        self._series_id = None
        self._popup_notifications = None
        self._name = None
        self._last_update_time = None
        self._is_subscribed = None
        self._name_local = None
        self._country_name = None
        self._email_notifications = None
        self._country_name_local = None
        self.discriminator = None

        if series_id is not None:
            self.series_id = series_id
        if popup_notifications is not None:
            self.popup_notifications = popup_notifications
        if name is not None:
            self.name = name
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if is_subscribed is not None:
            self.is_subscribed = is_subscribed
        if name_local is not None:
            self.name_local = name_local
        if country_name is not None:
            self.country_name = country_name
        if email_notifications is not None:
            self.email_notifications = email_notifications
        if country_name_local is not None:
            self.country_name_local = country_name_local

    @property
    def series_id(self):
        """Gets the series_id of this WatchlistItem.  # noqa: E501

        Series ID  # noqa: E501

        :return: The series_id of this WatchlistItem.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this WatchlistItem.

        Series ID  # noqa: E501

        :param series_id: The series_id of this WatchlistItem.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def popup_notifications(self):
        """Gets the popup_notifications of this WatchlistItem.  # noqa: E501

        Shows if popup notifications are enabled  # noqa: E501

        :return: The popup_notifications of this WatchlistItem.  # noqa: E501
        :rtype: bool
        """
        return self._popup_notifications

    @popup_notifications.setter
    def popup_notifications(self, popup_notifications):
        """Sets the popup_notifications of this WatchlistItem.

        Shows if popup notifications are enabled  # noqa: E501

        :param popup_notifications: The popup_notifications of this WatchlistItem.  # noqa: E501
        :type: bool
        """

        self._popup_notifications = popup_notifications

    @property
    def name(self):
        """Gets the name of this WatchlistItem.  # noqa: E501

        The series name  # noqa: E501

        :return: The name of this WatchlistItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WatchlistItem.

        The series name  # noqa: E501

        :param name: The name of this WatchlistItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_update_time(self):
        """Gets the last_update_time of this WatchlistItem.  # noqa: E501

        The date when the series was last updated  # noqa: E501

        :return: The last_update_time of this WatchlistItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this WatchlistItem.

        The date when the series was last updated  # noqa: E501

        :param last_update_time: The last_update_time of this WatchlistItem.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def is_subscribed(self):
        """Gets the is_subscribed of this WatchlistItem.  # noqa: E501

        Shows if the user is subscrebed to this series  # noqa: E501

        :return: The is_subscribed of this WatchlistItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_subscribed

    @is_subscribed.setter
    def is_subscribed(self, is_subscribed):
        """Sets the is_subscribed of this WatchlistItem.

        Shows if the user is subscrebed to this series  # noqa: E501

        :param is_subscribed: The is_subscribed of this WatchlistItem.  # noqa: E501
        :type: bool
        """

        self._is_subscribed = is_subscribed

    @property
    def name_local(self):
        """Gets the name_local of this WatchlistItem.  # noqa: E501

        The local series name  # noqa: E501

        :return: The name_local of this WatchlistItem.  # noqa: E501
        :rtype: str
        """
        return self._name_local

    @name_local.setter
    def name_local(self, name_local):
        """Sets the name_local of this WatchlistItem.

        The local series name  # noqa: E501

        :param name_local: The name_local of this WatchlistItem.  # noqa: E501
        :type: str
        """

        self._name_local = name_local

    @property
    def country_name(self):
        """Gets the country_name of this WatchlistItem.  # noqa: E501

        The series country name  # noqa: E501

        :return: The country_name of this WatchlistItem.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this WatchlistItem.

        The series country name  # noqa: E501

        :param country_name: The country_name of this WatchlistItem.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def email_notifications(self):
        """Gets the email_notifications of this WatchlistItem.  # noqa: E501

        If set shows the frequency of the email notifications  # noqa: E501

        :return: The email_notifications of this WatchlistItem.  # noqa: E501
        :rtype: str
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this WatchlistItem.

        If set shows the frequency of the email notifications  # noqa: E501

        :param email_notifications: The email_notifications of this WatchlistItem.  # noqa: E501
        :type: str
        """

        self._email_notifications = email_notifications

    @property
    def country_name_local(self):
        """Gets the country_name_local of this WatchlistItem.  # noqa: E501

        The series local country name  # noqa: E501

        :return: The country_name_local of this WatchlistItem.  # noqa: E501
        :rtype: str
        """
        return self._country_name_local

    @country_name_local.setter
    def country_name_local(self, country_name_local):
        """Sets the country_name_local of this WatchlistItem.

        The series local country name  # noqa: E501

        :param country_name_local: The country_name_local of this WatchlistItem.  # noqa: E501
        :type: str
        """

        self._country_name_local = country_name_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WatchlistItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
