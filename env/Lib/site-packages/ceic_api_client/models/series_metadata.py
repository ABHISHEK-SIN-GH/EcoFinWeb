# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PythonSdk/FullDevGuide'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/PHPSdk/FullDevGuide'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://developer.isimarkets.com/en/CEIC/JavascriptSdk/FullDevGuide'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.8.11
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ceic_api_client.models.classification import Classification  # noqa: F401,E501
from ceic_api_client.models.country import Country  # noqa: F401,E501
from ceic_api_client.models.frequency import Frequency  # noqa: F401,E501
from ceic_api_client.models.geo_info import GeoInfo  # noqa: F401,E501
from ceic_api_client.models.indicator import Indicator  # noqa: F401,E501
from ceic_api_client.models.province import Province  # noqa: F401,E501
from ceic_api_client.models.series_metadata_last_change import SeriesMetadataLastChange  # noqa: F401,E501
from ceic_api_client.models.source import Source  # noqa: F401,E501
from ceic_api_client.models.status import Status  # noqa: F401,E501
from ceic_api_client.models.unit import Unit  # noqa: F401,E501


class SeriesMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mnemonic': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'classification': 'Classification',
        'geo_info': 'list[GeoInfo]',
        'frequency': 'Frequency',
        'is_forecast': 'bool',
        'id': 'int',
        'unit': 'Unit',
        'indicator': 'Indicator',
        'last_update_time': 'datetime',
        'has_schedule': 'bool',
        'source': 'Source',
        'multiplier_code': 'str',
        'is_revised': 'bool',
        'province': 'Province',
        'last_change': 'SeriesMetadataLastChange',
        'remarks': 'str',
        'number_of_observations': 'int',
        'last_value': 'float',
        'new_series': 'bool',
        'name': 'str',
        'country': 'Country',
        'period_end': 'int',
        'series_tag': 'str',
        'status': 'Status',
        'key_series': 'bool'
    }

    attribute_map = {
        'mnemonic': 'mnemonic',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'classification': 'classification',
        'geo_info': 'geoInfo',
        'frequency': 'frequency',
        'is_forecast': 'isForecast',
        'id': 'id',
        'unit': 'unit',
        'indicator': 'indicator',
        'last_update_time': 'lastUpdateTime',
        'has_schedule': 'hasSchedule',
        'source': 'source',
        'multiplier_code': 'multiplierCode',
        'is_revised': 'isRevised',
        'province': 'province',
        'last_change': 'lastChange',
        'remarks': 'remarks',
        'number_of_observations': 'numberOfObservations',
        'last_value': 'lastValue',
        'new_series': 'newSeries',
        'name': 'name',
        'country': 'country',
        'period_end': 'periodEnd',
        'series_tag': 'seriesTag',
        'status': 'status',
        'key_series': 'keySeries'
    }

    def __init__(self, mnemonic=None, start_date=None, end_date=None, classification=None, geo_info=None, frequency=None, is_forecast=None, id=None, unit=None, indicator=None, last_update_time=None, has_schedule=None, source=None, multiplier_code=None, is_revised=None, province=None, last_change=None, remarks=None, number_of_observations=None, last_value=None, new_series=None, name=None, country=None, period_end=None, series_tag=None, status=None, key_series=None):  # noqa: E501
        """SeriesMetadata - a model defined in Swagger"""  # noqa: E501

        self._mnemonic = None
        self._start_date = None
        self._end_date = None
        self._classification = None
        self._geo_info = None
        self._frequency = None
        self._is_forecast = None
        self._id = None
        self._unit = None
        self._indicator = None
        self._last_update_time = None
        self._has_schedule = None
        self._source = None
        self._multiplier_code = None
        self._is_revised = None
        self._province = None
        self._last_change = None
        self._remarks = None
        self._number_of_observations = None
        self._last_value = None
        self._new_series = None
        self._name = None
        self._country = None
        self._period_end = None
        self._series_tag = None
        self._status = None
        self._key_series = None
        self.discriminator = None

        if mnemonic is not None:
            self.mnemonic = mnemonic
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if classification is not None:
            self.classification = classification
        if geo_info is not None:
            self.geo_info = geo_info
        if frequency is not None:
            self.frequency = frequency
        if is_forecast is not None:
            self.is_forecast = is_forecast
        if id is not None:
            self.id = id
        if unit is not None:
            self.unit = unit
        if indicator is not None:
            self.indicator = indicator
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if has_schedule is not None:
            self.has_schedule = has_schedule
        if source is not None:
            self.source = source
        if multiplier_code is not None:
            self.multiplier_code = multiplier_code
        if is_revised is not None:
            self.is_revised = is_revised
        if province is not None:
            self.province = province
        if last_change is not None:
            self.last_change = last_change
        if remarks is not None:
            self.remarks = remarks
        if number_of_observations is not None:
            self.number_of_observations = number_of_observations
        if last_value is not None:
            self.last_value = last_value
        if new_series is not None:
            self.new_series = new_series
        if name is not None:
            self.name = name
        if country is not None:
            self.country = country
        if period_end is not None:
            self.period_end = period_end
        if series_tag is not None:
            self.series_tag = series_tag
        if status is not None:
            self.status = status
        if key_series is not None:
            self.key_series = key_series

    @property
    def mnemonic(self):
        """Gets the mnemonic of this SeriesMetadata.  # noqa: E501

        Mnemonics information  # noqa: E501

        :return: The mnemonic of this SeriesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._mnemonic

    @mnemonic.setter
    def mnemonic(self, mnemonic):
        """Sets the mnemonic of this SeriesMetadata.

        Mnemonics information  # noqa: E501

        :param mnemonic: The mnemonic of this SeriesMetadata.  # noqa: E501
        :type: str
        """

        self._mnemonic = mnemonic

    @property
    def start_date(self):
        """Gets the start_date of this SeriesMetadata.  # noqa: E501

        The date of the first time-point  # noqa: E501

        :return: The start_date of this SeriesMetadata.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SeriesMetadata.

        The date of the first time-point  # noqa: E501

        :param start_date: The start_date of this SeriesMetadata.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this SeriesMetadata.  # noqa: E501

        The date of the latest time-point  # noqa: E501

        :return: The end_date of this SeriesMetadata.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SeriesMetadata.

        The date of the latest time-point  # noqa: E501

        :param end_date: The end_date of this SeriesMetadata.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def classification(self):
        """Gets the classification of this SeriesMetadata.  # noqa: E501


        :return: The classification of this SeriesMetadata.  # noqa: E501
        :rtype: Classification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this SeriesMetadata.


        :param classification: The classification of this SeriesMetadata.  # noqa: E501
        :type: Classification
        """

        self._classification = classification

    @property
    def geo_info(self):
        """Gets the geo_info of this SeriesMetadata.  # noqa: E501

        Contains geographical information for each node  # noqa: E501

        :return: The geo_info of this SeriesMetadata.  # noqa: E501
        :rtype: list[GeoInfo]
        """
        return self._geo_info

    @geo_info.setter
    def geo_info(self, geo_info):
        """Sets the geo_info of this SeriesMetadata.

        Contains geographical information for each node  # noqa: E501

        :param geo_info: The geo_info of this SeriesMetadata.  # noqa: E501
        :type: list[GeoInfo]
        """

        self._geo_info = geo_info

    @property
    def frequency(self):
        """Gets the frequency of this SeriesMetadata.  # noqa: E501


        :return: The frequency of this SeriesMetadata.  # noqa: E501
        :rtype: Frequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SeriesMetadata.


        :param frequency: The frequency of this SeriesMetadata.  # noqa: E501
        :type: Frequency
        """

        self._frequency = frequency

    @property
    def is_forecast(self):
        """Gets the is_forecast of this SeriesMetadata.  # noqa: E501

        Is series forecasted or not  # noqa: E501

        :return: The is_forecast of this SeriesMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_forecast

    @is_forecast.setter
    def is_forecast(self, is_forecast):
        """Sets the is_forecast of this SeriesMetadata.

        Is series forecasted or not  # noqa: E501

        :param is_forecast: The is_forecast of this SeriesMetadata.  # noqa: E501
        :type: bool
        """

        self._is_forecast = is_forecast

    @property
    def id(self):
        """Gets the id of this SeriesMetadata.  # noqa: E501

        The series unique identifier  # noqa: E501

        :return: The id of this SeriesMetadata.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeriesMetadata.

        The series unique identifier  # noqa: E501

        :param id: The id of this SeriesMetadata.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def unit(self):
        """Gets the unit of this SeriesMetadata.  # noqa: E501


        :return: The unit of this SeriesMetadata.  # noqa: E501
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SeriesMetadata.


        :param unit: The unit of this SeriesMetadata.  # noqa: E501
        :type: Unit
        """

        self._unit = unit

    @property
    def indicator(self):
        """Gets the indicator of this SeriesMetadata.  # noqa: E501


        :return: The indicator of this SeriesMetadata.  # noqa: E501
        :rtype: Indicator
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this SeriesMetadata.


        :param indicator: The indicator of this SeriesMetadata.  # noqa: E501
        :type: Indicator
        """

        self._indicator = indicator

    @property
    def last_update_time(self):
        """Gets the last_update_time of this SeriesMetadata.  # noqa: E501

        The date and time [ISO 8601] when the series was last updated in CEIC database.  # noqa: E501

        :return: The last_update_time of this SeriesMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this SeriesMetadata.

        The date and time [ISO 8601] when the series was last updated in CEIC database.  # noqa: E501

        :param last_update_time: The last_update_time of this SeriesMetadata.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def has_schedule(self):
        """Gets the has_schedule of this SeriesMetadata.  # noqa: E501

        If series has schedule or not  # noqa: E501

        :return: The has_schedule of this SeriesMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._has_schedule

    @has_schedule.setter
    def has_schedule(self, has_schedule):
        """Sets the has_schedule of this SeriesMetadata.

        If series has schedule or not  # noqa: E501

        :param has_schedule: The has_schedule of this SeriesMetadata.  # noqa: E501
        :type: bool
        """

        self._has_schedule = has_schedule

    @property
    def source(self):
        """Gets the source of this SeriesMetadata.  # noqa: E501


        :return: The source of this SeriesMetadata.  # noqa: E501
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SeriesMetadata.


        :param source: The source of this SeriesMetadata.  # noqa: E501
        :type: Source
        """

        self._source = source

    @property
    def multiplier_code(self):
        """Gets the multiplier_code of this SeriesMetadata.  # noqa: E501

        The series multiplier code. `MN` - Million `NA` - No multiplier `TH` - Thousand `BN` - Billion `TN` - Trillion `TT` - Ten Thousand `QN` - Quadrillion `HM` - Hundred Million `HT` - Hundred Thousand `2T` - Twenty Thousand `HB` - Hundred Billion `TM` - Ten Million `TB` - Ten Billion  # noqa: E501

        :return: The multiplier_code of this SeriesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._multiplier_code

    @multiplier_code.setter
    def multiplier_code(self, multiplier_code):
        """Sets the multiplier_code of this SeriesMetadata.

        The series multiplier code. `MN` - Million `NA` - No multiplier `TH` - Thousand `BN` - Billion `TN` - Trillion `TT` - Ten Thousand `QN` - Quadrillion `HM` - Hundred Million `HT` - Hundred Thousand `2T` - Twenty Thousand `HB` - Hundred Billion `TM` - Ten Million `TB` - Ten Billion  # noqa: E501

        :param multiplier_code: The multiplier_code of this SeriesMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["MN", "NA", "TH", "BN", "TN", "TT", "QN", "HM", "HT", "2T", "HB", "TM", "TB"]  # noqa: E501

        multiplier_code = self._parse_enum_value(multiplier_code, allowed_values)
        if multiplier_code not in allowed_values:
            raise ValueError(
                "Invalid value for `multiplier_code` ({0}), must be one of {1}"  # noqa: E501
                .format(multiplier_code, allowed_values)
            )

        self._multiplier_code = multiplier_code

    @property
    def is_revised(self):
        """Gets the is_revised of this SeriesMetadata.  # noqa: E501

        Is series revised or not  # noqa: E501

        :return: The is_revised of this SeriesMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_revised

    @is_revised.setter
    def is_revised(self, is_revised):
        """Sets the is_revised of this SeriesMetadata.

        Is series revised or not  # noqa: E501

        :param is_revised: The is_revised of this SeriesMetadata.  # noqa: E501
        :type: bool
        """

        self._is_revised = is_revised

    @property
    def province(self):
        """Gets the province of this SeriesMetadata.  # noqa: E501


        :return: The province of this SeriesMetadata.  # noqa: E501
        :rtype: Province
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this SeriesMetadata.


        :param province: The province of this SeriesMetadata.  # noqa: E501
        :type: Province
        """

        self._province = province

    @property
    def last_change(self):
        """Gets the last_change of this SeriesMetadata.  # noqa: E501


        :return: The last_change of this SeriesMetadata.  # noqa: E501
        :rtype: SeriesMetadataLastChange
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this SeriesMetadata.


        :param last_change: The last_change of this SeriesMetadata.  # noqa: E501
        :type: SeriesMetadataLastChange
        """

        self._last_change = last_change

    @property
    def remarks(self):
        """Gets the remarks of this SeriesMetadata.  # noqa: E501

        Series remarks  # noqa: E501

        :return: The remarks of this SeriesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this SeriesMetadata.

        Series remarks  # noqa: E501

        :param remarks: The remarks of this SeriesMetadata.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def number_of_observations(self):
        """Gets the number_of_observations of this SeriesMetadata.  # noqa: E501

        Number of timepoints  # noqa: E501

        :return: The number_of_observations of this SeriesMetadata.  # noqa: E501
        :rtype: int
        """
        return self._number_of_observations

    @number_of_observations.setter
    def number_of_observations(self, number_of_observations):
        """Sets the number_of_observations of this SeriesMetadata.

        Number of timepoints  # noqa: E501

        :param number_of_observations: The number_of_observations of this SeriesMetadata.  # noqa: E501
        :type: int
        """

        self._number_of_observations = number_of_observations

    @property
    def last_value(self):
        """Gets the last_value of this SeriesMetadata.  # noqa: E501

        Last timpoint value  # noqa: E501

        :return: The last_value of this SeriesMetadata.  # noqa: E501
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this SeriesMetadata.

        Last timpoint value  # noqa: E501

        :param last_value: The last_value of this SeriesMetadata.  # noqa: E501
        :type: float
        """

        self._last_value = last_value

    @property
    def new_series(self):
        """Gets the new_series of this SeriesMetadata.  # noqa: E501

        Indicates whether a series is newly added to the database within the last 30 days.  # noqa: E501

        :return: The new_series of this SeriesMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._new_series

    @new_series.setter
    def new_series(self, new_series):
        """Sets the new_series of this SeriesMetadata.

        Indicates whether a series is newly added to the database within the last 30 days.  # noqa: E501

        :param new_series: The new_series of this SeriesMetadata.  # noqa: E501
        :type: bool
        """

        self._new_series = new_series

    @property
    def name(self):
        """Gets the name of this SeriesMetadata.  # noqa: E501

        The series name, localized based on the `lang` query parameter or `Accept-Language` header. Defaults to English if no translated resource is available.  # noqa: E501

        :return: The name of this SeriesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SeriesMetadata.

        The series name, localized based on the `lang` query parameter or `Accept-Language` header. Defaults to English if no translated resource is available.  # noqa: E501

        :param name: The name of this SeriesMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country(self):
        """Gets the country of this SeriesMetadata.  # noqa: E501


        :return: The country of this SeriesMetadata.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SeriesMetadata.


        :param country: The country of this SeriesMetadata.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def period_end(self):
        """Gets the period_end of this SeriesMetadata.  # noqa: E501

        Indicates the period end. Weekly series - the day of the week at which the period ends – 0 for Sunday, 1 for Monday, ..., 6 for Saturday. Monthly series - the day of the month, or the previous valid one at which the period ends, i.e. a value of 31 indicates the period ends on Jan 31, Feb 28/29, March 31, April 30, etc. Annual, semi-annual, quarterly series - the month at which the period ends - 1 for January, 2 for February, etc.  # noqa: E501

        :return: The period_end of this SeriesMetadata.  # noqa: E501
        :rtype: int
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this SeriesMetadata.

        Indicates the period end. Weekly series - the day of the week at which the period ends – 0 for Sunday, 1 for Monday, ..., 6 for Saturday. Monthly series - the day of the month, or the previous valid one at which the period ends, i.e. a value of 31 indicates the period ends on Jan 31, Feb 28/29, March 31, April 30, etc. Annual, semi-annual, quarterly series - the month at which the period ends - 1 for January, 2 for February, etc.  # noqa: E501

        :param period_end: The period_end of this SeriesMetadata.  # noqa: E501
        :type: int
        """

        self._period_end = period_end

    @property
    def series_tag(self):
        """Gets the series_tag of this SeriesMetadata.  # noqa: E501

        The dX code of the series  # noqa: E501

        :return: The series_tag of this SeriesMetadata.  # noqa: E501
        :rtype: str
        """
        return self._series_tag

    @series_tag.setter
    def series_tag(self, series_tag):
        """Sets the series_tag of this SeriesMetadata.

        The dX code of the series  # noqa: E501

        :param series_tag: The series_tag of this SeriesMetadata.  # noqa: E501
        :type: str
        """

        self._series_tag = series_tag

    @property
    def status(self):
        """Gets the status of this SeriesMetadata.  # noqa: E501


        :return: The status of this SeriesMetadata.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SeriesMetadata.


        :param status: The status of this SeriesMetadata.  # noqa: E501
        :type: Status
        """

        self._status = status

    @property
    def key_series(self):
        """Gets the key_series of this SeriesMetadata.  # noqa: E501

        Indicates whether a series is a key indicator for the selected economy, as defined by CEIC in-house analysts.  # noqa: E501

        :return: The key_series of this SeriesMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._key_series

    @key_series.setter
    def key_series(self, key_series):
        """Sets the key_series of this SeriesMetadata.

        Indicates whether a series is a key indicator for the selected economy, as defined by CEIC in-house analysts.  # noqa: E501

        :param key_series: The key_series of this SeriesMetadata.  # noqa: E501
        :type: bool
        """

        self._key_series = key_series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    @staticmethod
    def _parse_enum_value(value, enum_values):
        for enum_value in enum_values:
            if str(value).lower() == str(enum_value).lower():
                value = enum_value

        return value

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeriesMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
